import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc
from sklearn.preprocessing import StandardScaler

# Fetch the dataset from the URL
data = pd.read_csv('/content/heart_attack_prediction_dataset.csv.csv')

# Assuming your target variable is in a column named 'Heart Attack Risk'
X = data.iloc[:, :-1]  # Include all columns except the last one
y = data['Heart Attack Risk'].values

# Identify and exclude non-numeric columns (e.g., strings) for scaling
non_numeric_columns = X.select_dtypes(include='object').columns
X = X.drop(columns=non_numeric_columns)

# Split the dataset into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features by removing the mean and scaling to unit variance
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create a logistic regression model
model = LogisticRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred_prob = model.predict_proba(X_test)[:, 1]  # Probabilities of belonging to class 1
# Apply the threshold of 0.5 to make binary predictions
y_pred = (y_pred_prob > 0.5).astype(int)  # positive
# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}")
# Calculate the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)
# Print actual probabilities and binary predictions for the first 5 instances
for i in range(5):
    print(f"Instance {i + 1}: Probability={y_pred_prob[i]:.2f}, Prediction={y_pred[i]}")

# Calculate ROC curve
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)
roc_auc = auc(fpr, tpr)

# Determine the optimal Cutoff Threshold
optimal_idx = np.argmax(tpr - fpr)
optimal_threshold = thresholds[optimal_idx]

# Print Optimal Cutoff Threshold for Logistic Regression
print("Optimal Cutoff Threshold for Logistic Regression:", optimal_threshold)
# Print AUC for logistic regression model
print("AUC for logistic regression model:", roc_auc)
# Plotting the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['0', '1'],
            yticklabels=['0', '1'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {roc_auc:.2f}')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.scatter(fpr[optimal_idx], tpr[optimal_idx], marker='o', color='red', label=f'Optimal Threshold = {optimal_threshold:.2f}')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve for Logistic Regression')
plt.legend(loc='lower right')
plt.show()
